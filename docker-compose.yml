version: "3.7"
services:
  test:
    build:
      context: .
      dockerfile: Dockerfile-test
    environment:
      - AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
      - AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
      # ECS adds this environment variable
      - AWS_CONTAINER_CREDENTIALS_RELATIVE_URI=/creds
    volumes:
      - type: volume
        source: minio-buckets
        target: /test-data
      - type: volume
        source: simulate-nfs
        target: /nfs-1
      - type: volume
        source: simulate-nfs
        target: /nfs-2
    networks:
      ecs_emulation:
        ipv4_address: '169.254.170.3'
    depends_on:
      - minio
      - ecs-credentials-endpoint
  minio:
    build:
      context: .
      dockerfile: Dockerfile-minio
    environment:
      - MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE
      - MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
      - MINIO_REGION=us-east-1
    ports:
      - "9000:9000"
    volumes:
      - type: volume
        source: minio-buckets
        target: /test-data
    networks:
      ecs_emulation:
        ipv4_address: '169.254.170.4'

  ecs-credentials-endpoint:
    build:
      context: .
      dockerfile: Dockerfile-ecs-credentials
    environment:
      # So the mock ECS credentials server can simulate the real one
      - AWS_CONTAINER_CREDENTIALS_RELATIVE_URI=/creds
    ports:
      - "80:80"
    networks:
      ecs_emulation:
        # ECS provides a similar service at this exact address
        ipv4_address: '169.254.170.2'
volumes:
  minio-buckets:
  simulate-nfs:

networks:
  ecs_emulation:
    driver: bridge
    ipam:
      config:
        - subnet: '169.254.170.0/24'
